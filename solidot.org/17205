➜如果你的 PC 带光驱，你可以认领 10 美元
https://www.solidot.org/story?sid=51274	11092
索尼、NEC、松下、日立-LG被控虚抬出售给PC制造商戴尔和惠普等公司的光驱价格，去年12月这些公司就光驱反托拉斯集体诉讼案达成了1.245亿美元的<a href="https://www.opticaldiskdriveantitrust.com/#two" target="_blank"><u>和解协议</u></a>。根据和解协议，如果你在2003年4月1日到2008年12月31日之间购买了带DVD光驱的PC或独立DVD光驱，每一台光驱你都有资格认领到<a href="https://www.cnet.com/news/optical-disc-drive-settlement-claim-sony-optiarc-nec-hitachi-lg-panasonic/" target="_blank"><u>10美元赔偿金</u></a>。当然，有资格认领的人有地区限制，你必须是美国亚利桑那、加利福尼亚、哥伦比亚特区、佛罗里达、夏威夷、堪萨斯、缅因、马萨诸塞、密歇根、明尼苏达、密苏里、蒙大拿、内布拉斯加、内华达、新罕布什尔、新墨西哥、纽约、北卡罗来纳、 西弗吉尼亚或威斯康星州的居民。想要认领赔偿金的人需要在7月1日前递交文件，你不需要递交购买证据，但最好准备好收据，因为和解管理方有权要求你出示购买证明。
➜儿童色情网站版主被判20年徒刑
https://www.solidot.org/story?sid=51275	12869
基于 Tor 匿名网络的儿童色情网站 Playpen 的一名版主、47岁的肯塔基居民 David Lynn Browning 本周二<a href="https://arstechnica.com/tech-policy/2017/02/moderator-for-darknet-child-porn-site-playpen-gets-20-years/" target="_blank"><u>被判了20年徒刑</u></a>，在出狱后他终身仍然需要接受监督。作为一名版主，Browning 确保 Playpen 只谈论儿童色情不谈论其他。他深入参与了网站的日常运作，包括管理会员、执行严格规章和删除非儿童色情内容。他在网站上的登录时长高达数百小时，发表了超过1000个帖子，并设计了网站logo。FBI 是在2015年扣押了 Playpen 网站服务器，Playpen 的另外两名管理员：57岁的 Steven Chase 将在今年晚些时候被判刑，47岁的 Michael Fluckiger 上个月被判了20年徒刑。
➜高盛用200名工程师取代600名交易员
https://www.solidot.org/story?sid=51276	18897
拜自动交易程序所赐，高盛纽约总部用200名计算机工程师<a href="https://www.technologyreview.com/s/603431/as-goldman-embraces-automation-even-the-masters-of-the-universe-are-threatened/" target="_blank"><u>取代了600名交易员</u></a>。高盛的副首席财务官 Marty Chavez 在上个月哈佛举办的一个研讨会上透露了这一消息。以高盛为代表的华尔街投行正越来越多的依赖于计算机程序化交易。今天45%的交易是通过电子形式完成的。根据英国公司Coalition 的数据，全球最大的12家投行交易员的平均薪水是50万美元，经理级别雇员的薪水更高。如今计算机交易算法正在取代这些高薪雇员从事交易，而高盛的发现是4名交易员可以被一名计算机工程师替代。高盛的雇员中有三分之一大约9000人属于计算机工程师。
➜Uber雇佣NASA工程师研究飞行汽车
https://www.solidot.org/story?sid=51277	19570
在为NASA服务30多年后，马克•摩尔(Mark Moore)加入Uber的Elevate部门，<a href="http://www.ftchinese.com/story/001071288" target="_blank"><u>担任飞行工程技术总监</u></a>。去年10月，这家叫车服务公司首次表现出对于短程“垂直起降”(VTOL)技术的兴趣，当时该公司发表一份白皮书，讨论利用“按需航空服务”转变日常通勤模式的可能性。摩尔的研究探索了机器人技术、自控系统及电气推进方面的进步如何能够带来新型小型飞行器。在一篇他任职NASA期间发表的<a href="https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110011311.pdf" target="_blank"><u>论文</u></a>(PDF)中，他解释说：“与现有的短距离飞行能力（无论是无人还是载人飞行器）相比，零排放、高效率、高可靠性、极低噪声的垂直起降能力将成为游戏规则的颠覆者。”这种颠覆性路径对Uber具有天然吸引力，它不仅已经给出租车行业带来全面变化，还被有些人认为促使汽车保有量加速下降。
➜印度考虑提供基本收入
https://www.solidot.org/story?sid=51278	22184
发达国家如芬兰从上个月<a href="http://www.bbc.com/ukchina/simp/vert-fut-38894636" target="_blank"><u>开始了</u></a>为期两年的基本收入社会实验，发展中国家如印度也在<a href="http://www.economist.com/news/finance-and-economics/21716064-powerful-idea-unfeasible-now-india-floats-idea-universal" target="_blank"><u>思考提供基本收入</u></a>。基本收入旨在解决陷入困境的福利制度所面临的问题，以印度为例，它向居民提供了多达950项福利方案，包括了食物、饮用水、化肥方面的补贴，占用大量的政府预算，但在实践过程中穷人并没有得到多少好处。用基本收入去取代大部分福利方案，以直接发钱的方式让穷人真正受益。印度提议的基本收入是每年给每个人发放 7,620卢比，不到城市居民一个月的最低薪水，这笔收入不可能提供舒适的生活，但可以将绝对贫困比例从 22%减少到0.5%以下。二十世纪有影响力的经济学家米尔顿·弗里德曼（Milton Friedman）和弗里德里希·哈耶克（Friedrich Hayek）都认为，某种形式的保障收入是政府减轻贫困的最佳途径。在他的著作《法律、立法与自由》中，哈耶克将该政策作为给予每个人经济自由的一种方式加以提出："给每个人提供一定的最低收入保障，或者是当人们无法供养自己时给予人们支持的底线保障；似乎不仅是对所有人的共同风险完全合法的保护，也是一个伟大社会的必要组成部分，在这样的社会中个人不再对自己所出身的特定小群体的成员提出特别的要求。"随着社会福利受到越来越多的财政和政治压力，一些人认为基本收入是一个显而易见的解决方案。
➜韦氏词典收录大量科技新词，其中包括“标题党”
https://www.solidot.org/story?sid=51279	29405
韦氏词典<a href="https://www.merriam-webster.com/words-at-play/new-words-in-the-dictionary-feb-2017" target="_blank"><u>宣布</u></a>收录1000多个新名词，其中包含了大量科技新词。韦氏词典尚未公布完整的新单词名单，但在声明中<a href="https://arstechnica.com/business/2017/02/merriam-webster-updates-tech-word-list-and-you-will-believe-which-one-was-added/" target="_blank"><u>列举了</u></a>众多正变得司空见惯的新词语，<a href="https://www.merriam-webster.com/dictionary/clickbait" target="_blank"><u>clickbait</u></a>（标题党）和listicle（与标题党意思相近）都有了正式条目，已经存在十几年的click fraud（点击欺诈）也得到了正式认可，其它科技名词还有<a href="https://www.merriam-webster.com/dictionary/open%20source" target="_blank"><u>open source</u></a>（开源）、peer-to-peer（点对点），ping、 rootkit、keylogger、backward compatible，以及<a href="https://www.merriam-webster.com/dictionary/NSFW" target="_blank"><u>NSFW</u></a>和net neutrality（网络中立），Internet of things（物联网）。科学类的新词包括了热门基因编辑技术<a href="https://www.merriam-webster.com/dictionary/CRISPR">CRISPR</a>等等。
➜Brave的比特币支付平台能否拯救在线出版
https://www.solidot.org/story?sid=51280	31307
Mozilla 联合创始人、JavaScript 作者 Brendan Eich 的新浏览器项目 Brave <a href="http://www.solidot.org/story?sid=47720" target="_blank"><u>提供了两种商业模式</u></a>：无广告模式，用户以比特币的形式支付月费，享受没有广告的浏览体验，Brave 则根据用户浏览的网站向这些网站分配收入；广告替代模式，也就是用 Brave 广告网络的非侵入式广告替代旧的广告，在这一模式下用户能通过浏览广告获取一部分比特币收入，用户可以选择将这笔钱捐给自己喜爱的网站，或者将这笔收入转移到自己的账号去进行消费。现在，Brave <a href="http://spectrum.ieee.org/tech-talk/telecom/internet/can-braves-bitcoin-payment-platform-save-online-publishing" target="_blank"><u>开始提供一个比特币支付平台</u></a>，使用该浏览器的用户可以选择创建一个钱包，钱包将由一家叫 BitGo 的公司托管，用户可以向钱包转入比特币，设定一个想要在网络浏览上花多少钱的值。一个月之后，由你和 BitGo 签名的比特币交易将这笔资金转入 Brave 的钱包，由 Brave 向网站分配收入，它从每一笔交易中提成5%。为了吸引没有比特币或不知道比特币的用户， Eich 和 Brave设计师确保比特币尽可能的隐身。没有比特币的用户可使用信用卡或借记卡向钱包充值，交易将由 Coinbase 处理。比特币支付旨在向因为广告屏蔽而损失广告收入的网站出版商提供一个替代收入来源，而广告是在线出版商最主要的收入来源。
➜Twitter采取新措施限制网络暴力
https://www.solidot.org/story?sid=51281	32963
中国最大的微博服务新浪微博已经发展出完善的审查策略，比如你发表的某些帖子只有你看到其他人看不见，而一个有“前科”的人创建的新马甲能很快被识别出来。现在，在遏制网络暴力的名义下，Twitter开始采取类似的措施。Twitter工程副总裁Ed Ho通过<a href="https://blog.twitter.com/2017/an-update-on-safety" target="_blank"><u>官方博客</u></a>宣布了三大措施：阻止被永久关闭账号的用户创建新的账号；更安全的搜索结果，从搜索中删除潜在敏感内容的推文；识别和折叠潜在含有语言暴力的回复。这些变化将在未来几天或几周内推出。
➜72%的匿名浏览历史可以联系到真人
https://www.solidot.org/story?sid=51282	35875
斯坦福和普林斯顿的研究人员<a href="https://www.theatlantic.com/technology/archive/2017/02/browsing-history-identity/515763/" target="_blank"><u>发现</u></a>，今天的用户更可能点击朋友或朋友的朋友在社交网络上分享的链接。根据这一点，研究人员发现很容易将一个匿名的浏览历史与社交网络上的公开信息对接起来，识别用户的真实身份。在论文《<a href="http://randomwalker.info/publications/browsing-history-deanonymization.pdf" target="_blank"><u>De-anonymizing Web Browsing Data with Social Networks</u></a>》中，研究人员报告他们的算法对374套匿名浏览历史记录的测试取得了70%左右的成功率。
➜TiDB 架构的演进和开发哲学
https://www.solidot.org/story?sid=51283	36397
<a href="/~PingCAP">PingCAP</a> 写道 <i>"本文来自&nbsp;CSDN《程序员》<a href="http://geek.csdn.net/news/detail/136459" target="_blank"><u>2017&nbsp;年&nbsp;2&nbsp;月</u></a>的封面报道。对于一个从零开始的数据库来说：选择什么语言，整体架构怎么做，要不要开源，如何去测试…太多的问题需要去考量。在本篇文章中，PingCAP&nbsp;联合创始人兼&nbsp;CTO&nbsp;黄东旭对&nbsp;TiDB&nbsp;的开发历程进行了详细简介，为大家还原&nbsp;TiDB&nbsp;的架构演进全过程。
</i>
<p></p>
<!--more-->
<p></p>
在大约两年前，我有一次做 MySQL 分库分表和中间件的经历，那时在中间件里做 sharding，把 16 个节点的 MySQL 扩到 32 节点，差不多要提前一个月做演练，再用一个礼拜来上线。我就在想，能不能有一个数据库可以让我们不再想分库分表这些东西？当时我们也刚刚做完 Codis，觉得分布式是个比较合适的解决方案。另外我一直在关注学术圈关于分布式数据库的最新进展，有看到谷歌在 2013 年发的 Spanner 和 F1 的论文，所以决定干脆就重新开始写一个数据库，从根本上解决 MySQL 扩展性的问题。
<p>而决定之后发现面对的问题非常复杂：选择什么语言，整个架构怎么做，到底要不要开源……做基础软件有一个很重要的事情：写出来并不难，难的是你怎么保证这个东西写对了。尤其是对于业务方，他们所有的业务正确性是构建在基础软件的正确性上。所以，对于分布式系统来说，什么是写对了，怎么去测试，这都是很重要的问题。关于这些我想了很久。
</p>
<p></p>
<p></p>
<p></p>
<p>一开始总是要起步的。当时就决定冷静一下，先确定一个目标：解决 MySQL 的问题。MySQL 是单机型数据库，它没有办法做全扩展，我们选择 MySQL 兼容，首先选择在协议和语法层面的兼容，因为已有的社区里边很多的海量的测试。第二点是用户的迁移成本，能让用户迁移得很顺畅。第三是因为万事开头难，必须得有一个明确的目标，选定一个目标去做，对开发人员来说心理的压力最小。确定目标以后，我们 3 个人的创始团队从原来的公司出来，拿了一笔比较大的风险投资，开始正式做这件事情。</p>
<p>兼容 MySQL 最简单的方案，就是直接用 MySQL。为了让这个东西尽快地做起来，我们一开始做了一个最简单的版本，复用 MySQL前端 代码，做一个分布式的存储引擎就可以了，这个事情想想还是蛮简单的，所以非常乐观，觉得这个战略很完美。</p>
<p>
</p>
<p>上图是我在 2015 年 4 月份用六个礼拜完成的第一个版本的框架，但是后来没好意思开源出来，虽然能跑，但是在性能上完全无法接受。我就想这个东西为什么这么慢？一步一步去看每一层，就想动手改，但是发现工程量巨大，比如 MySQL 的 SQL 优化器， &nbsp;事务模型等等，完全没有办法下手。就像这个架构图里看到的，因为在 MySQL Engine 这一层，我们能做的事情太少了，所以就没有办法。</p>
<p>第一版实验到此宣告失败，现在看起来写 SQL parser 和优化器等这些已经是绕不开了，我们索性决定从头开始写，唯一给我安慰的就是终于可以使用我们最爱的编程语言了，就是 Go。</p>
<p></p>
<p>我们跟其他做这种软件的工程师的思路相反，选择了从上往下写，先写最顶层的 SQL 的接口 SQL Layer，我要保证这个东西长得跟 MySQL 一模一样，包括网络协议和语法层。从 TiDB 网络协议、SQL 的语法解析器、到 SQL 的优化器、执行器等基本从上到下写了一遍。这个阶段持续了大概三个月左右。从这个阶段开始，我们慢慢摸索出了几个实践中深有体会的开发哲学。</p>
<p>♣&nbsp;第一，所有计算机科学里面的问题都可以把它不停地抽象，抽象到另外一个层次上去解决。
</p>
<p>我们完成了架构 0.2，此时 TiDB 只有一个 SQL 解析器，完全不能存数据，因为底下的存储引擎根本没有实现。我想要保证这个数据库是对的，要先保证 SQL Layer 是对的，让它可以完整的跑 MySQL 的 test。至于底下的存储我可以实现个假的或者内存里先存着，先保证我的 SQL 正常运转起来就可以了。</p>
<p>其实在苦哈哈的写 TiDB 的 SQL Parser 的时候我们还做了很多事情，不管是 MySQL 的 unittests，SQL logic tests，ORM tests 等，把它的测试全都收集下来，到现在大概有一千万个集成测试用例。我们还做了一个事情，就是把存储引擎这个概念抽象成很薄的几个接口，使得它去接入一个 KV engine。绝大多数的 KV engine 非常多，比如 LevelDB，RocksDB，接口的语义都是非常明确的。</p>
<p>几个月过去了，团队也大约有了十几个人，因为在每一层我都非常严格地要求我们团队用接口来划分，使得每一个层次上的工作都是可以并行，这对于整个项目的推进是非常有利的事情。</p>
<p>大概去年九月份，历史上第一个不能用来存数据的数据库——没有存储引擎的第一版 TiDB 开源了，放在 HackerNews 非常受欢迎，还被推荐到了首页。</p>
<p>♣&nbsp;第二，Talk is cheap，show me the tests。</p>
<p>做基础软件 test 是比 code 更重要的事情。比如你提了一个 Feature，我到底是合并还是不合，不能直接判断，需要看到你的 test。我们现在在 GitHub 上运营 TiDB，一个新的提交如果让整个项目的代码测试的覆盖率下降了，我是不允许你的代码合并到主干分支的，非常严格。构建一个数据库最难的并不是把它写出来，而是证明它是对的，尤其是分布式系统的测试要比单机的测试要更加困难。因为在分布式系统里面每一个节点都可能 crash，每一个网络的延迟可能是飘忽不定的，各种各样的异常情况都会发生。我们在做整个数据库的时候，第一步是完成 SQL Layer，第二步是把每个 IO，每个集群的节点交互行为全都抽象成为一个接口，使得我们可以回放整个包括 TCP/IP 包的接收顺序。一旦发现 bug，就把它重放到单元测试里面重现。不管是新的开发者或者新的模块加入，是无法相信“人”的，只相信机器。我只相信 strong test 才能不断的保证项目在可以控制的范围之内。</p>
<p>后来做了一个架构 0.5，因为已经有了 SQL 层，SQL 层跟存储层基本上做了完全分离，终于可以像最初的 0.1 那样，我可以接一个分布式引擎上去，当时我们接了 HBase。 HBase 是阶段性的战略选型，因为我们想既然我的 SQL Layer 写的足够稳定，那么我们先接一个分布式的引擎上去，但是我又不能在架构中引入太多不确定的变量，于是就挑选了一个在市面上能找到的，我认为最稳定的分布式引擎，先接上去看整个系统到底能不能跑起来。结果还可以，能够跑起来，但是我们的要求会更高，所以之后我们就把 HBase 扔掉了。接 HBase 这个事情标志着我们上层 SQL Layer 跟我们接口的抽象已经足够稳定，我们的 test 已经足够健壮，能让我们往下一步步去做分布式的东西。</p>
<p>这个架构大概是这样：</p>
<p>
</p>
<p>上层是 MySQL 业务层 Client，你可以用任意的 MySQL 的客户端去连接它，如果数据量大的话，你不需要再去分库分表，就把它当成无穷大的 MySQL 用就好，这个用户体验很好。因为 TiDB 是一个无状态的设计，它并不存储数据，所以你可以部署无数多个 TiDB 负载均衡。底层一开始是个 HBase，那时候是 11 月，至此距离创业半年过去了。</p>
<p>因为有海量的 Test 保证，让整个设计的过程没有太过困难。不过这里涉及一个问题：我们在做技术选型的时候，如果在有很大自由度的前提下，怎么去控制发挥欲望和膨胀的野心？你的敌人并不是预算，而是复杂度。你怎么控制每一层的复杂度是非常重要的，特别是对于一个架构师来说，所有的工作都是在去规避复杂度，提升开发效率和稳定性。</p>
<p>当时我们选择了一个非常小众的编程语言就是 Rust。首先它是一个 high performance 的编程语言，它没有 GC ，也没有 runtime，很多的创新是做在了编译器这一层，最大的特点就是安全、安全和安全，我认为它是更现代的 C++，不过 C++ 最大的问题是如果用不熟容易把自己的手脚砍断。当时我选 Rust 以后，很多朋友问我你为什么去选择它。说实话最开始我是很怕的，因为这个语言毕竟是一个新的比较小众的语言，community 也没那么大，但这是当时对于我们团队的状况来说是最优选择。我们就用 Rust 写起来，结果一不小心 TiKV 成为了 Rust 社区最大的开源项目之一。因为我们在 Rust 很早期的时候就开始用了，Rust 官方也一直在找我们来分享 Rust 的使用经验，我们也很热心的去拥抱 Rust community。 Rust 社区每周的 weekly 里面有一个固定的专栏叫做 “This week in TiKV” ，就是为我们打造的 :)</p>
<p>2015 年的冬天我们是在纠结中度过的。一是用最新的编程语言 Rust， 大家之前都没有接触过；第二就是，我们想要的“弹性扩展、真正的高可用、高性能、强一致”这四点要求，每一个都非常困难。</p>
<p>怎么办？只能去拥抱社区，不要自己去做所有的事情，一是人数有限，第二是复用是个很好的习惯，既然别人都已经干过这些事情，就不要再去重复性的工作。我们要做一个真正高可用的数据库，把高可用的分布式存储找了一圈发现 Etcd，Etcd 背后算法叫 Raft这是个一致性算法等价于 Paxos。这个算法目前来说最稳定地实现就是 Etcd 里的 Raft。而且 Etcd 是真正在生产环境中被大量认证过的 Raft 的实现。我仔细看过 Etcd 的源码，每个状态的切换都抽象成接口，我们测试是可以脱离整个网络、脱离整个 IO、脱离整个硬件的环境去构建的。我觉得这个思路非常赞，这也是为什么 CoreOS 的 Etcd &nbsp;包括像 k8s 背后的元信息存储也用的是它，质量非常高，性能非常好。但是 Etcd 有一个问题是它是 GO 写的，我们已经决定去用 Rust 开发底层存储的数据库。如果用类似 paxos 这种算法，我不相信除了 Google Chubby 以外的公司有能力把它写对。但是 Raft 不一样，虽然它也很难，但是毕竟它是可以实现的东西，所以我们为了它的质量，加速我们开发的进度，我们做了一件比较疯狂的事情，就是我们把 Etcd 的 Raft 状态机的每一行代码，line by line 的翻译成了 Rust。而我们第一个转的就是所有 Etcd 本身的测试用例。我们写一模一样的 test ，保证这个东西我们 port 的过程是没有问题的。</p>
<p>TiDB 底层的存储引擎一开始是不能存数据的，那现在是时候要选一个真正的 Storage engine，我们觉得这个事情是一个巨坑。本地存储引擎让一个小团队去写的话基本不现实，我们就从最底层选择了 RocksDB。RocksDB 大家可以认为是一个单机的 key-value engine，前身其实是 LevelDB，是 Google 在 2011 年左右开源的 key-value 的存储引擎。 RocksDB 的背后结构是 LSM Tree，是一个对写非常友好、同时在你的机器内存比较大的时候它的读性能会非常好的数据结构 。存储引擎还有一个很重要的工作就是，需要根据你机器的性能去做针对性的调优，大家会看到像 MySQL 调优都快变成黑魔法一样的东西，RocksDB 也是一个调优能写本书的存在。大家可以看到，新一代的分布式数据库存储引擎大家都会选择 RocksDB，我觉得这是大势所趋。</p>
<p></p>
<p>从 15 年的冬天开始，我们苦逼哈哈的写了 5 个月的代码，用 Rust 去写，到 2016 年 4 月 1 日 TiKV 终于开源了。</p>
<p>
</p>
<p>从上图能看到，最底层是 RocksDB ，上面的分布式这一层是用 Raft，这两层虽然是我们写的，但是质量上是我们社区的盟友帮我们保证的。在 Raft 之上是 MVCC ，从这里往上，就都是我们自己来写的了。所以 TiKV 终于是一个可以实现弹性扩展、支持 ACID 事务、全局一致性，跨数据中心高可用的存储引擎了，而且性能还非常的棒。因为我没有在底下去接一个像 HDFS 的文件系统。</p>
<p>其实从开源到现在，我们一直在做 TiKV 的性能调优、稳定性等很多的工作，但是从架构上来看，这个架构我觉得至少在未来的五年之内，不会再有很大的变化。我一直在强调的点就是：复杂性才是你最大的敌人，我宁可是以不变应万变的姿势去应对未来突变的需求。还好，数据库这个东西的需求变化也没太多。</p>
<p>♣&nbsp;第三，Where there’s a metric there’s a way。</p>
<p>再说说 Metrices。对架构师而言一个很重要的工作就是查看系统中有哪些 block 的点，挨个解决掉这些问题。我们发现在数据库领域，有很多很多点如果能予以解决的话，性能会上去十倍。我有一个观点，所有的东西，只要有 Metrices，能被监控，这个东西就能被解决。 也就是：“Where there’s a metric there’s a way”。 一旦能重复观察性能的平衡点，性能问题是最好解决的问题，但是写对是最难的问题。</p>
<p>一般来说大家都在公司内部自己去审 Metrics，还有监控工具。对于我们小团队来说，或者说是一个拥抱社区的团队来说，这基本上是一个得不偿失的事情。因为你费好多劲去写一个，还不如社区里面写得好，这很麻烦。所以，我们在数据库里面内嵌了 Prometheus 和 Grafana。Prometheus 现在在硅谷太火了，它其实是一个分布式的时序数据库，但是它很适用于日志搜集和性能调优，它做得更完美的地方是它提供 DSL 去用于查询提供监控的报警，包括你可以写报警的规则。它没有一个好看的 Dashboard，这时社区里面另外一个哥们就出来，说我要去给你做一个很好看的界面，这个项目就是 Grafana。Grafana 是一个可视化的 dashboard ，它能让每一次 dashboard 排布的位置、类型、样式、大小、宽度都是可以自定义的。而且整个 Metrics &nbsp;收集 Prometheus 提供了两种模式，一种是 push 的模式，一种是 pull 的模式。 对于收集监控的代码性能影响很小。</p>
<p>最后想补充的问题，第一就是工具。对于一个互联网出身的团队来说，其实工具是我们非常重视的一个点，可以最小化业务的迁移成本。我觉得很多在大公司做重构，或者做基础软件的工程师，最好的方式就是润物细无声。你完全不知道我在做底层的重构就莫名地重构完了，这是最完美的状态。比如我之前做 Codis，我的要求是如果用户现在在用 Twemproxy ，他迁到新的方案上必须要一行代码都没有改，你甚至完全不知道我在做迁移，这才是最好的，我认为这应该是所有做基础设施团队的自我修养。</p>
<p>第二就是不要意外。比如说，你在做一个数据库，你号称跟 MySQL一模一样，那么你展现出来任何跟 MySQL 不一样的东西都会让用户吓一跳，而且这是很重要的一个开发原则。</p>
<p>第三就是悲观预设。永远都会有各种各样的恶心事情和异常的状况发生，其实这是作为分布式系统开发工程师每天都要对自己说的话。业务的数据是重于泰山的，但是任何的基础设施都是会挂的，你的网线可能会断，整个数据中心可能会 shut down……你要预设你的数据库是一定会丢数据的，这个时候你的数据库设计才会更好。如何保护自己如何保护业务，我们做了一些神奇的工具，比如像 syncer，这个东西就是把 TiDB cluster 作为一个 假的 slave 接到 MySQL 上，业务在上面跑 MySQL ，后面存起来其实是个集群。另外还做了一个比较变态的事情，就是反向。我们顶在业务上面，下面可以接到 MySQL。MySQL 可以做 TiDB 的 slave，TiDB 可以做 MySQL 的 slave。这个功能对于业务来说是非常惊喜的。有的客户一开始想用 TiDB但是有点害怕，我说没关系，你在后面接个从，然后你在从上面去查询。比如你原来一个 SQL 跑了 20 分钟，现在我能让你跑到 10 秒以内；或者你跑了大概半年都一点数据没丢，系统非常稳定，再切成主的业务代码中更改。</p>
<p></p>
<p>一个架构师总是要去想一些未来十年会发生什么。有一个名词 Cloud-Native，我是认为一切的东西在未来都会跑在云端，如何针对云上这个环境去设计基础软件？数据库设计一个很重要的原则是，数据一旦发生了宕机它能够自动修复和均衡数据，人在里边给这些集群加机器就行了，整个集群一定要能够有自己的思考。未来怎么针对 Cloud 做基础架构，这是一个需要去思考的问题。</p>
"
➜前卫生部长黄洁夫争论死囚器官移植
https://www.solidot.org/story?sid=51284	41358
在梵蒂冈举行的反对器官贩卖全球峰会上，前卫生部长黄洁夫<a href="http://www.bbc.com/zhongwen/simp/chinese-news-38904530" target="_blank"><u>承认</u></a>中国器官移植项目改革进展缓慢、"非常艰难"。黄洁夫在2005年首次公开承认死囚器官移植，称中国90％以上的移植手术的器官来源于已经执行死刑的囚犯。2015年中国宣布停止该项目，但由于缺乏透明度，器官捐赠者的严重短缺和中国长期存在的黑市交易，外界一直对此持怀疑态度。中国人体器官分配与共享计算机系统负责人王海波在会上强调，中国绝不可能完全控制器官移植活动。因为中国目前有约100万个医疗中心和300万名执业医生。
➜黑洞持续十年吞噬恒星
https://www.solidot.org/story?sid=51285	42633
明亮X射线源通常代表着一个重要天文事件，而这些X射线源的持续时间通常不会太长。然而根据发表在《Nature Astronomy》期刊上的<a href="http://www.nature.com/articles/s41550-016-0033" target="_blank"><u>一项研究</u></a>，研究人员报告一个明亮X射线源持续爆发了十年。这个X射线源被认为是一个<a href="https://arstechnica.com/science/2017/02/a-black-hole-has-been-devouring-a-star-for-a-decade/" target="_blank"><u>正在吞噬恒星的超大质量黑洞</u></a>。编号为 3XMM J150052.0+015452的X射线源在2005年被首次观测到，它释放出的能量相当于每秒超过10^19兆吨，相比较下太阳释放出的能量相当于每秒10^12 兆吨，也就是说该天体释放的能量1000万倍于太阳。当恒星被附近黑洞的潮汐力撕裂，恒星将会源源不断的向黑洞提供物质，而黑洞在吞噬物质的时候会释放出光子。根据研究人员的计算，一颗太阳大小的恒星能向该黑洞提供可吞噬2年的物质，而长达10年的吞噬则需要10倍太阳质量的恒星。
➜7000年前的太阳事件
https://www.solidot.org/story?sid=51286	44004
一个国际团队通过测量树轮中的C14比率，<a href="https://scienceblog.com/491943/happened-sun-7000-years-ago/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+scienceblogrssfeed+%28ScienceBlog.com%29" target="_blank">识别出</a>在公元前5480发生了一次太阳事件。当太阳的活动发生变化，它会对地球产生直接影响。当太阳相对不活跃，地球大气层中的C14比率会增加。因为树木会吸收空气中的碳，因此树轮中的C14比率能反应出过去的太阳活动和不同寻常的太阳事件。研究人员猜测事件与太阳磁场变化和一系列的强太阳喷发或弱太阳活动相关。
➜全世界的众多银行感染了秘密的恶意程序
https://www.solidot.org/story?sid=51287	46226
卡巴斯基实验室在2015年<a href="http://www.solidot.org/story?sid=44400" target="_blank"><u>报告</u></a>内部网络遭到了入侵。研究人员将新的恶意程序及相应平台命名为Duqu 2.0，这种恶意程序只藏在被感染设备的内存中，很难被检测出来。现在，<a href="https://arstechnica.com/security/2017/02/a-rash-of-invisible-fileless-malware-is-infecting-banks-around-the-globe/" target="_blank"><u>无文件恶意程序正走向主流</u></a>。卡巴斯基实验室的研究人员发现全世界至少140家银行和企业感染了藏身于内存中的恶意程序。由于感染很难被识别，因此实际感染数量只会更高。这140家机构位于40个不同国家，其中美国、法国、厄瓜多尔、肯尼亚和英国五个国家的数量最多。研究人员是在去年底首次发现该病毒，当时一家银行的安全团队在 Microsoft域控制器的物理内存中发现了Metasploit的内存组件<a href="https://www.offensive-security.com/metasploit-unleashed/about-meterpreter/">Meterpreter</a>，对其进行分析后发现代码是被下载的，使用PowerShell命令注入到内存中，攻击者设计窃取系统管理员的密码，获取远程访问的管理员权限。
➜中国人支持全球化？
https://www.solidot.org/story?sid=51288	47643
中国的官方和民间似乎很少反对全球化，但这种全球化显然是有选择性的，比如互联网就不存在全球化，导致中国的互联网公司很难走出去，外国的互联网公司很难走进来。迄今为止，<a href="http://www.ftchinese.com/story/001071278?full=y" target="_blank"><u>中国对全球化的拥抱</u></a>主要加入的是经济和贸易领域的全球化，资本、人员流动、意识形态等领域的全球化基本谈不上，这使得中国可以尽情享受全球化的好处，而避过了相关的风险和陷阱。以人口流动为例：英国脱欧的一个重要原因是欧盟的开放边界政策使得移民和难民大量涌入，感觉不堪重负；欧洲近年来频发恐怖袭击，原因是过去半个世纪里吸纳了太多穆斯林移民又融入失败；在美国，非法移民也是一个非常敏感的社会议题。而难民和移民之所以能在欧美扎下根，是因为这些国家有一系列足以让难民和移民留下来的政策，比如即便你没有合法身份也可以就医上学，费用由政府负担；久不久会有大赦，非法移民一夜之间就合法了。这些政策在客观上起到了鼓励难民和非法移民涌入的作用。