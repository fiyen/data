➜如何评价手游《龙之谷2》？
http://www.zhihu.com/question/342215249/answer/1335506979?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title	14412
<p>《龙之谷2》最大的亮点就是其开放大世界的设定加上大型多人MMO的玩法，尤其是其在美术方面的创新。细腻精致的模型、真实的光照体感、四季变化、昼夜更替、天气变化等美术表现，从小细节到大场景，无一不为玩家们呈现龙之谷历代之最的游戏画面。在战斗方面，也力求给玩家清晰明确的战斗体验的同时带来优质的打击感，比如龙之谷2的特色之一——连击技。</p><p>我们特意采访到了盛趣游戏《龙之谷2》的美术总监秦雁，与大家深度分享关于美术方向的创作，以下是采访全文。</p><p><br></p><p><b>1.  龙之谷IP的2代续作手游，传承了IP的Q萌经典画风、人设、场景，继续采用3D无锁定的战斗操作模式，强化打击感和战斗表现力，在前作基础上建立职业多流派BD强化策略性等等深受玩家的喜爱，可以简单的介绍下选择Unity引擎开发这款游戏的原因吗？</b></p><p>首先Unity的通用性，引擎非常适合手机游戏开发，且对各个平台的支持都很友好，同时项目组可以自己定制了各类shader和script来满足各类需求。</p><p>Unity的易用性，Asset Store 上插件丰富，可以轻松实现一些比较复杂的功能与效果，编辑器友好，开发人员上手很快，极大的缩短了项目的研发周期。</p><p>还有一点就是我们整个项目组得到Unity大中华区的Support与TA团队的有力支持，特别对一些棘手问题，大大提高了解决的速度。</p><p><img src="https://pic1.zhimg.com/v2-76da403d69fb61015c1bf28e1d0f0282_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="3000" data-rawheight="1920" data-watermark="original" data-original-src="v2-76da403d69fb61015c1bf28e1d0f0282" data-watermark-src="v2-5a263fe5b3df08be0c246275aa2e00e9" data-private-watermark-src="v2-d009eedf29708c9edbb636c785297d30" style="max-width: 400px;"></p><p><br></p><p><b>2.</b>  <b>游戏中人物细节更加精致，形象清新Q萌，惹人喜爱，可以结合新职业女牧师模型，谈谈Q萌且精致的人物形象创作的技巧吗？</b></p><p><img src="https://pic1.zhimg.com/v2-50f57c0ac88f592c867131650c469e33_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="481" data-rawheight="222" data-watermark="original" data-original-src="v2-50f57c0ac88f592c867131650c469e33" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>龙之谷是一个经典的IP，在设定方面本身就做的非常的棒，但毕竟是运营10年前的一款网游，现在都已经2020了，龙之谷2如何让玩家老爷们有那熟悉的感觉，但又比起之前产品更加时尚，就成了我们的追求。角色的原画设定保留了原先的色彩规划，制作上借鉴了一些二次元的表现特征，以次时代3D的方式表现出来，目标就是既要让IP用户所接受，又让广泛的年轻手游玩家所喜爱。</p><p><img src="https://pic1.zhimg.com/v2-57de11c324e90c48b93ee27c4a26c646_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="4498" data-rawheight="3186" data-watermark="original" data-original-src="v2-57de11c324e90c48b93ee27c4a26c646" data-watermark-src="v2-d765d196b6d28d7921de1cdb12e0d7c7" data-private-watermark-src="v2-9501d17f18acee034e76711fc87204e8" style="max-width: 400px;"></p><p>以女牧师的设定为例，这个角色的特征就是呆毛和白毛，夸张的大眼睛，萌萌哒；色彩上白色，蓝色为主，搭配黄色，点缀金色和银色，突出牧师的圣洁与华丽感。</p><p><img src="https://pic1.zhimg.com/v2-f74d8b6d9f9b379e41dd5751d8df84a5_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="949" data-rawheight="880" data-watermark="original" data-original-src="v2-f74d8b6d9f9b379e41dd5751d8df84a5" data-watermark-src="v2-b8b3bc8868aea565c9d137565d2922e3" data-private-watermark-src="v2-176849a7650b0f27d63f07e03a469d5a" style="max-width: 400px;"></p><p><br></p><p><b>3.</b>  <b>游戏内各职业的打击感也是非常棒的，可以简单的分享下弓箭手的打击感是如何实现的吗？</b></p><p>众所周知，龙之谷是端游里面打击感最好的网游之一了，这次《龙之谷2》的定位就是- MMO游戏中的动作之王，希望给玩家清晰明确的战斗体验的同时又表现好龙之谷最精髓的打击感，连击技是龙之谷2的第一个特色，玩家可以根据自己的喜好，搭配出不同的技能组合，技能配合的好，一套连击技打下来，对方就GG了；打击感上，龙之谷经典的击飞，击倒，到浮空，倒地等效果，强大而又那么的朴实无华。</p><p><img src="https://pic1.zhimg.com/v2-23847bf19c536506176218e7842dd645_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="578" data-rawheight="304" data-watermark="original" data-original-src="v2-23847bf19c536506176218e7842dd645" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>在技术的实现上，我们利用了<b>Unity引擎强大的扩展性</b>，编写了一套非线性技能编辑器，非常方便地导入动画和特效资源，这套编辑器可以让动画师所见即所得的进行技能编辑，策划小姐姐们再也不用在表格上填数字来猜想打击效果了，大大的提高了工作效率。</p><p>举个例子：我们一个主角包含233套动画（超丰富的动作表现），在我们的编辑器面板方便查看每一个动作及其帧数。</p><p><img src="https://pic1.zhimg.com/v2-037c33c387783196c46cd649a21bffa4_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="1029" data-rawheight="734" data-watermark="original" data-original-src="v2-037c33c387783196c46cd649a21bffa4" data-watermark-src="v2-402ef6d7111ae77e59fabd79f18229b8" data-private-watermark-src="v2-36309ee9c69896610b4f1c685e410345" style="max-width: 400px;"></p><p> 然后，在每一个动作的时间线上，来配置哪一帧出现特效，摄像机动画，声效等，所见即所得，非常的方便。</p><p><img src="https://pic1.zhimg.com/v2-3568f2bf6847afe4a2452dc863f43a0a_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="1029" data-rawheight="302" data-watermark="original" data-original-src="v2-3568f2bf6847afe4a2452dc863f43a0a" data-watermark-src="v2-b7b975c24ff0ba9b45584a05ed838e01" data-private-watermark-src="v2-092e81074394e068190c77fa3ed1108e" style="max-width: 400px;"></p><p><br></p><p><b>4.  可以简单介绍下龙之谷MMO大世界，无缝大地图的制作细节吗？</b></p><p>一直以来，龙之谷的玩家都对阿尔特里亚大陆只能管中窥豹而耿耿于怀，这次，龙之谷2将会给玩家一个自由，开放的大世界，再也不只是主城+副本了，升级打怪，玩家可以在这个世界策马奔腾，骑着狮鹫翱翔蓝天白云，也可以钓鱼，采矿，轻松休闲的在游戏里面生活，在我们的美丽的湖心岛，拥有6400M * 6400M的超大场景，玩家绕其跑一圈大概需要20分钟呢。</p><p><img src="https://pic1.zhimg.com/v2-48b7344923205553bcd4c76ce436fb55_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="463" data-rawheight="260" data-watermark="original" data-original-src="v2-48b7344923205553bcd4c76ce436fb55" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>为了实现MMO大世界的效果，我们专门编写了<b>地形和植被编辑器</b>，一个大世界场景是由多个Tile平铺而成，一个Tile就是一个Unity场景，Tile则由多个chunk平铺而成，如下图所示：</p><p><img src="https://pic1.zhimg.com/v2-34e6c6cc41acb6ebe231c54a3b9ebd99_720w.png?rss" data-caption="" data-size="normal" data-rawwidth="1022" data-rawheight="428" data-watermark="original" data-original-src="v2-34e6c6cc41acb6ebe231c54a3b9ebd99" data-watermark-src="v2-6b986c90c413921e318e0d419437d5bd" data-private-watermark-src="v2-6c5eb807bde05039493680443c872160" style="max-width: 400px;"></p><p>这套地形和植被编辑器非常方便地支持以下功能：</p><ul><li>可以通过高度图创建地形，且使用自定义笔刷修改地形</li><li>支持单场景编辑和多场景编辑</li><li>支持4张地形纹理贴图和法线贴图</li><li>采用多场景烘焙lightmap，可以有效的解决跨域场景的影子，接缝等问题</li><li>支持植被系统，可以在编辑器中通过笔刷绘制草地</li><li>支持下雨下雪等天气变化</li></ul><p><br></p><p><b>5.  游戏中碧蓝的海岸浅滩，仿佛游戏屏幕中有扑面的海洋气息、潮湿而略带咸味，而且海水在太阳的直射下，海水还会泛起点点金色光芒，关于这种真实的海滩效果是如何实现的呢？可以跟大家分享下吗？</b></p><p><img src="https://pic1.zhimg.com/v2-524268c3440533e28d7801e226720161_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="382" data-rawheight="181" data-watermark="original" data-original-src="v2-524268c3440533e28d7801e226720161" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>海滩是阿尔特里亚大陆的一个特色，很多故事都发生在海边，所以我们通过海水起伏、波光、海滩的泡沫效果这3个点简单的展示这个美丽真实海滩的制作：</p><p>（1）采用了<b>Genster波</b>的算法模拟海水的起伏,它的算法顶点会不仅有高度分量y的变化，同时在xz平面也会有一定的位移，这样在控制xz平面顶点位移大小的同时也控制了波峰是尖还是平缓。</p><p><img src="https://pic1.zhimg.com/v2-38f60146cf926b431befe781a84c6c4f_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="576" data-rawheight="250" data-watermark="original" data-original-src="v2-38f60146cf926b431befe781a84c6c4f" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>（2）在光照计算中，我们参考了GDC2011论文的次表面散射算法，然后法线贴图来模拟波光，同时加入环境反射和菲涅尔的计算，在浅水的散射部分，我们让它的亮度有一些提高，增加真实感。</p><p><img src="https://pic1.zhimg.com/v2-d3512a2aa279bec2cf458b7433be2027_720w.png?rss" data-caption="" data-size="normal" data-rawwidth="468" data-rawheight="288" data-watermark="original" data-original-src="v2-d3512a2aa279bec2cf458b7433be2027" data-watermark-src="v2-a64d03bcf15be986139e79c33aa4e94f" data-private-watermark-src="v2-bcdc28106d1b8df0d53ac49dd728b02e" style="max-width: 400px;"></p><p>（3）海滩的泡沫效果，我们单独用sin波加uv偏移来模拟，同时加了一个pass来模拟海水退下后潮湿的沙滩效果。</p><p><br></p><p><b>6.</b>  <b>龙之谷中昼夜交替的拟真天气系统，让玩家可以切身的感受到时间的流动和天气转换下阿尔特里亚的美景，增加了游戏的真实性和代入感，可以简单的分享下龙之谷2中的天气系统是如何实现的呢？</b></p><p><img src="https://pic1.zhimg.com/v2-f7e55c5b31c3ea61d3263d8594cd713d_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="531" data-rawheight="292" data-watermark="original" data-original-src="v2-f7e55c5b31c3ea61d3263d8594cd713d" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>真实的阿尔特里亚大陆怎能没有白天黑夜、刮风下雨等天气变化呢？我们使用了Unity Asset Store 上的<b>uSky插件</b>，同时对其进行了优化，使其在昼夜交替的物理表现非常亮眼，可以让玩家明显的感受到天气的变化与时间的流逝；其次我们又增加了下雨，下雪，沙暴等天气系统增加了游戏的真实性和代入感，比如下雨系统，雨幕，云层的变化，地表积水的变化，雨滴落在场景建筑上形成水流的变化等，在24小时的变化都是不同的。我们通过曲线的方式来定义不同天气效果下不同元素（雾效，水面的反射）的变化，同时为了节省性能，我们把所用的texture都合并到全局变量中，高质量，高效率的实现了天气变化系统。</p><p><br></p><p><b>7.</b>  <b>与1相比，龙之谷2在场景方面的表现力更加的出色，空间的立体感更强。可以给大家分享下Unity场景的搭建、打灯、烘焙的流程吗？（以凯德拉场景为例）</b></p><p><img src="https://pic1.zhimg.com/v2-379251eac6876e937276d587c936c29d_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="463" data-rawheight="260" data-watermark="original" data-original-src="v2-379251eac6876e937276d587c936c29d" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>以凯德拉为例，我们通过以下步骤给玩家呈现了一个龙之谷的小镇风光</p><p>第一阶段：我们使用<b>bigworld场景编辑器</b>生成场景，导入高度图生成地表，同时通过笔刷调整地表细节，建筑物件导入，材质球指定，制作成profeb，摆放在场景合适的位置，layer属性指定，通过笔刷绘制地表植被，大型植物进行合理的排布。</p><p>第二阶段：为场景布置点光源，烘托场景气氛，动态物体采用lightprob来插值光照数据，为了更好的效果，我们的烘焙采用了Unity的<b>shadowMask模式</b>，它的最大优势是近景为实时光，远处为lightmap（虽然会产生3张lightmap影响性能，我们使用GPU-Instance来支持lightmap，这样性能的消耗忽略不计），同时搭配<b>PostProcessing后处理</b>，使场景效果美轮美奂。</p><p><img src="https://pic1.zhimg.com/v2-338e81a47df6e29b4e567c3ddee2e4a1_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="2554" data-rawheight="1266" data-watermark="original" data-original-src="v2-338e81a47df6e29b4e567c3ddee2e4a1" data-watermark-src="v2-9ebc674653fdf9805c3267496cdc13a5" data-private-watermark-src="v2-5a2246dd5a1bce3fc949f722ca105d53" style="max-width: 400px;"></p><p>第三阶段：天气系统参数调整，Navmesh碰撞体制作，为了使人物走在不同的材质上有不同的脚本步，需要对纹理做出命名规范，规范为纹理名称加后缀，比如：kdl_mud.tga，表示泥地纹理。</p><p><br></p><p><b>8.  可以简答的给广大的开发者们分享下游戏中表现下雨场景中湿滑的地面是如何通过Unity Shader来实现的呢？</b></p><p><img src="https://pic1.zhimg.com/v2-1b9d547450f347e1615f25496c616694_720w.gif?rss" data-caption="" data-size="normal" data-rawwidth="507" data-rawheight="295" data-watermark="original" data-original-src="v2-1b9d547450f347e1615f25496c616694" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>具体步骤如下：</p><ul><li>首先在场景的地表上绘制干湿区域</li><li>其次通过采样序列雨滴涟漪的法线图，在原始地表法线进行扰动</li></ul><p><img src="https://pic1.zhimg.com/v2-53ef6de06ae05e24db97b8e709803332_720w.png?rss" data-caption="" data-size="normal" data-rawwidth="698" data-rawheight="85" data-watermark="original" data-original-src="v2-53ef6de06ae05e24db97b8e709803332" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><ul><li>再通过反射Cube和菲尼尔效果来增强雨水的高光</li></ul><p><img src="https://pic1.zhimg.com/v2-47e26d3cde7b347660f986e6eb2364a2_720w.png?rss" data-caption="" data-size="normal" data-rawwidth="477" data-rawheight="64" data-watermark="original" data-original-src="v2-47e26d3cde7b347660f986e6eb2364a2" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><ul><li>最后插值晴天和雨天的颜色变化达到模拟从晴天到下雨的转换过程</li></ul><p><br></p><p><b>9.  Unity 企业技术支持团队与TA团队对项目有哪些支持，对项目有何帮助呢？</b></p><p>Unity 企业技术支持团队与TA团队对项目有很大的支持。</p><p>其中Unity TA团队：</p><ul><li>推荐使用uSky插件来帮助我们奠定天气系统的基础，同时提供雨雪天气变化的算法，为我们整个游戏的美术效果提供巨大的帮助。</li><li>预计算海水的genstern波算法和次表面散射算法。</li><li>角色上推荐用lut图来模拟sss效果，节省性能。</li></ul><p>Unity技术支持团队：</p><ul><li>在整个项目周期中，定期的驻厂对整个项目进行性能检测分析，提出了许多有用的优化建议。</li><li>在项目的中后期，帮助我们排查、定位一些闪退等疑难问题。</li></ul><p>再次感谢Unity团队给予的支持和帮助。</p><p><img src="https://pic1.zhimg.com/v2-b66937c5ca42ec8ada4fce7ed25fbdb3_720w.jpeg?rss" data-caption="" data-size="normal" data-rawwidth="2554" data-rawheight="1266" data-watermark="original" data-original-src="v2-b66937c5ca42ec8ada4fce7ed25fbdb3" data-watermark-src="v2-210d5e356226e96c5793ef0c90425a90" data-private-watermark-src="v2-d41ac39d0f82f92e32659d82469bccd4" style="max-width: 400px;"></p><p><br></p><p>可以看出制作团队在美术创作方面十分用心，昼夜、地图、海滩、雨水等，都在力求为大家展示更加庞大、更加真实的阿尔特里亚大陆，期待盛趣游戏未来为大家带来更多优秀的作品。</p>
➜游戏中有哪些看上去很简单，但实际上需要极高技术力或是极高成本的细节？
http://www.zhihu.com/question/405291121/answer/1335447014?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title	28817
<p>游戏里有一个即使是小学生也会做,但博士生都未必做的好的问题.</p><p>它是如此常见,几乎出现在除了&lt;&lt;nekopara&gt;&gt;外的所有的FPS游戏和绝大部分的RTS中.</p><p>如果你打游戏发现你的CPU烫的可以煎牛排,那么当中恐怕有一半的热量和这玩意多多少少有所关联.</p><p>它导致了海量的bug,包括但不限于五毛特效级别的穿模,人物或别的物体奇怪的舞蹈及鬼畜,血条消失术及瞬间移动和突然上天,都是因为它难以处理或处理不好.</p><p>但它听起来看上去真的超简单,我甚至不用堆些专业术语大家都看得懂,但在你没有真正把这玩意做出来之前,你对这玩意所述的一切算法和理论的不屑,都是在"云".</p><p>说了那么多,那么这玩意到底是啥,其实真也不是啥高大上的东西,这玩意叫碰撞检测.简单来说,就是判断游戏里两个物体有没有碰撞.我们先来举个最简单的栗子</p><p><img src="https://pic1.zhimg.com/v2-16ae5ed324874a969e4df78220cafe1e_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="475" data-rawheight="322" data-watermark="watermark" data-original-src="v2-16ae5ed324874a969e4df78220cafe1e" data-watermark-src="v2-35bc80da70c52b7d95568a2509a20fc6" data-private-watermark-src="v2-f8f15f1a4a1d57c4c2b6df3e255a51e1" style="max-width: 400px;"></p><p>ObjectA和ObjectB是游戏世界中的两个圆,如何判断它们有没有碰撞,你可能开始骂我撒币了,因为只要长了眼睛就能看出来这两个圆没碰在一起,但可惜我们不能靠眼睛这么玩,计算机有计算机的玩法,当然,这仍然很简单</p><p><img src="https://pic1.zhimg.com/v2-99722f04e7bac643735ee845505329c6_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="457" data-rawheight="301" data-watermark="watermark" data-original-src="v2-99722f04e7bac643735ee845505329c6" data-watermark-src="v2-01cb892512a91bf31e518c39ee514d52" data-private-watermark-src="v2-edcbd15b74bf4955bb644f6e196f3e2d" style="max-width: 400px;"></p><p>设Object A的圆心坐标为(x1,y1)半径为r1,设Object B的圆心坐标为(x2,y2)半径为r2,然后我们计算圆心之间的距离d和r1+r2,如果d&lt;=r1+r2,那么这两个圆毫无疑问是碰撞在一起的,如果d&gt;r1+r2,那么这两个圆就没碰在一起,如果你是码农你可能会用 <img src="https://www.zhihu.com/equation?tex=d%5E%7B2%7D" alt="d^{2}" eeimg="1"> 和 <img src="https://www.zhihu.com/equation?tex=%28r_1%2Br_2%29%5E2" alt="(r_1+r_2)^2" eeimg="1"> 来比较,这样就可能不用计算一次可能更耗时的开平方,不过没关系,这无关痛痒,这仍然超简单的是不.没关系,显然大部分游戏中只有2个Object的情况毕竟是少数,显然我们需要考虑2个以上Object的情况,比如说3个</p><p><img src="https://pic1.zhimg.com/v2-87faabd8ccca8316255781b1d3a55f37_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="481" data-rawheight="457" data-watermark="watermark" data-original-src="v2-87faabd8ccca8316255781b1d3a55f37" data-watermark-src="v2-9efcd36582cb4d3e6d0d1a0985e2d3a4" data-private-watermark-src="v2-89bed474e2d47bc2ab83ecfd0c09d413" style="max-width: 400px;"></p><p>   那么,如何判断这三个Object相互之间有没有碰撞关系呢,其实这也不是事儿,比如说上面三个Object,我们只需要依据两两碰撞的办法,分别判断A和B,A和C,B和C之间有没有碰撞在一起就行了,我相信很大一部分初学了C语言,想做一个弹幕游戏大部分就使用了上面这个办法,但如果我们把Object数量加到4个,问题就来了,我们发现2个Object的时候,我们只需要计算一次碰撞判断,有3个Object的时候,这个计算增加到了3次,如果这个Object增加到了4个,那我们就需要计算A-B,A-C,A-D,B-C,B-D,C-D一共是6次碰撞检测计算,当然,6次对于计算机来说这并不算什么,依据这种算法碰撞次数如果游戏中有n个Object,我们就需要计算 <img src="https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5E%7Bn-1%7D%7Bi%7D" alt="\sum_{i=1}^{n-1}{i}" eeimg="1"> 次碰撞,比如101个Object我们需要计算100+99+98+97+....1共计5050次碰撞,当然对CPU来说这仍然不算什么.但如果这个游戏是一个多人大型战场类游戏,你发现阵地上有1000发炮弹在到处飞时,你就可以闻到CPU的香气了.</p><p>   当然,要解决上面这个问题依然不是什么很难的事情,比如下面这种情况,一个游戏场景中有4个Object</p><p><img src="https://pic1.zhimg.com/v2-7d03d992942de360023de85071cf2dff_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="546" data-rawheight="540" data-watermark="watermark" data-original-src="v2-7d03d992942de360023de85071cf2dff" data-watermark-src="v2-1e8e88346f81bdef2795414b34b8946c" data-private-watermark-src="v2-f8d53360562b45f30ff5a18eed10f18d" style="max-width: 400px;"></p><p>我们把整个游戏世界均等分为4份</p><p><img src="https://pic1.zhimg.com/v2-218ad82b66e8c8a0151151db33fa51b0_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="598" data-rawheight="601" data-watermark="watermark" data-original-src="v2-218ad82b66e8c8a0151151db33fa51b0" data-watermark-src="v2-aa407d9d3cdbac6fd0b094950e43d83b" data-private-watermark-src="v2-86ef3356863ad5d65e416e56e09275c5" style="max-width: 400px;"></p><p>显然,我们可以先给游戏世界里的Object分个类,首先A和B在第一个区域,C和D在第4个区域,显然的,不同区域之间的Object显然是不会碰撞在一起的,于是,我们只需要2次碰撞计算就可以得出碰撞结果了,这个算法又叫四叉树碰撞检测算法,按树结构的理解是,我们建立了一个有四个子节点的树结构,然后把游戏里的对象划分进去,没关系,反正其算法的原理大致就是一个分治的思想,不管怎么说,这确实很好的优化了碰撞检测的时间复杂度</p><p>到这一步,你呵呵一乐,就这?也没见多复杂啊,放心,相当一部分码农的理论也就到了这一步,所以成就了很多的"云码农",坐好,现在我们开始加速了.</p><p>某天你和你的基(姬)友相约上线吃鸡,图上每一个圆点代表着一个人,显然区域4肥的流油导致很多玩家纷纷下饺子,那么这个时候,四叉树分割的算法显然就不能发挥其最大的优势了,毕竟大部分的节点都分布在了区域4中</p><p><img src="https://pic1.zhimg.com/v2-a23086b2e96fb49b85fe126ecec42a7c_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="591" data-rawheight="591" data-watermark="watermark" data-original-src="v2-a23086b2e96fb49b85fe126ecec42a7c" data-watermark-src="v2-e1523b2330d9168d15b891ff46649c24" data-private-watermark-src="v2-ef008af19b98775fef1ae46beb3cb3d0" style="max-width: 400px;"></p><p>你说,这好办啊,兵来将挡水来土掩,我们对区域4再进行一次四叉树分割不就好了</p><p><img src="https://pic1.zhimg.com/v2-913ed23a34c5a91e4b460e1595c4f76e_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="596" data-rawheight="593" data-watermark="watermark" data-original-src="v2-913ed23a34c5a91e4b460e1595c4f76e" data-watermark-src="v2-1689163f46738af59e29bb1e5a3cd0df" data-private-watermark-src="v2-d4df75f517916aeded8e4295cd5cdf35" style="max-width: 400px;"></p><p>你看,问题很好的解决了,这不也没啥大不了的不是,你甚至表示如果区域4里的object再多一点,你可以再分一次</p><p>当你说到这句话的时候,你恐怕现在心里也有点发虚了,因为你注意到上面的分割算法中,有些Object是横跨了多个区域的</p><p><img src="https://pic1.zhimg.com/v2-012a3ad3e73c84e0ca7ba77833692636_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="589" data-rawheight="589" data-watermark="watermark" data-original-src="v2-012a3ad3e73c84e0ca7ba77833692636" data-watermark-src="v2-b632f48958dae3450525b845a0630af1" data-private-watermark-src="v2-bff28e7d32aa6620666dbbbb4a995f4e" style="max-width: 400px;"></p><p>就比如上图中两个用蓝色框框框出来的那两个Object,它们横跨了两个区域,这也就意味着,你必须对这两个Object进行分片.也就是说,四叉树的多个叶子需要同时存储这个Object的节点,实际上四叉树算法看上去很美,实际上对Object的分类实际上也是做了一次碰撞检测,当然横跨2个区域的情况并不是那么极端,假如现在一个玩家他变身成了奥特曼,变成了一个无比庞大的Object(如下图的蓝色区域)</p><p><img src="https://pic1.zhimg.com/v2-65f06f2ab855851f4df01847e19ecb8a_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="597" data-rawheight="592" data-watermark="watermark" data-original-src="v2-65f06f2ab855851f4df01847e19ecb8a" data-watermark-src="v2-d0fe2e6b0779024db5306ce06ee89153" data-private-watermark-src="v2-4b2a581e1fd360180c6fb04ae7dceda1" style="max-width: 400px;"></p><p>你发现,这个时候四叉树的优化对这个节点毫无作用,你还需要承担这个节点分割带来的额外性能开销,出现了一个负优化的结果,那么这个时候你该怎么办呢?这个时候恐怕有人会说,把这个那么大的object存储在四叉树的父节点不就行了,我们不分片,只要这个Object占据了所有子节点的区域,,那么就将它存储在父节点中.</p><p>当然,如果只是"云代码"的话,上面的处理是成立的,但是实际要做的话,上面的处理是沙雕的,没法搞的,纸上谈兵的,因为在四叉树的分类中,节点是一个一个添加进去的,你无法控制这个四叉树什么时候会进行进一步的划分,比如上面这个蓝色Object现在它当然占据了整个地图的所有节点,但是当最右下角的区域出现越来越多新的Object不得不进行进一步分片时,你就会发现这个蓝色的Object在父节点中待不下去了</p><p><img src="https://pic1.zhimg.com/v2-dc341f9a8c47cdb73e2171b991b93b6c_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="594" data-rawheight="598" data-watermark="watermark" data-original-src="v2-dc341f9a8c47cdb73e2171b991b93b6c" data-watermark-src="v2-eddfb37f71a51a3e8a81882b33c4b0a8" data-private-watermark-src="v2-a8300d23f2ae11d22263e6765c60cf14" style="max-width: 400px;"></p><p>好了,一旦出现这个情况,这个大型Object不再能待在覆盖所有子节点中的父节点了,你将不得不再对这个大型的Object进行一次额外开销的分片计算,然后再将它重新分发到各个子节点中,如果这种非常大的Object还很多的话,你发现你还不如一开始就将它进行分片呢.但这个办法并非不可取,如果你知道你游戏里这种比较大的Object并不多,这种父节点存储法也许真能对碰撞的复杂度进行优化,所以这仍然是我们说的,不同情况不同考虑,真以为四叉树就长这个样能解决所有的碰撞处理算法,抱歉,不存在的.</p><p>好了,到这里现在开始,碰撞检测我就要只提问题不说解决办法了,为啥,因为难啊,不同情况需要依据游戏的情况进行不同情况的优化,我只是向你展示的是,碰撞检测并不像看上去那么简单.它仍然存在一堆问题需要你去解决</p><p>那么我们再举个栗子</p><p><img src="https://pic1.zhimg.com/v2-eeca052fa47e6850b54c6c12908052fa_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="597" data-rawheight="594" data-watermark="watermark" data-original-src="v2-eeca052fa47e6850b54c6c12908052fa" data-watermark-src="v2-029c0f8e49dedad89e90c5f3227edd92" data-private-watermark-src="v2-4e5e62490a06fae652dedeb28c3a3441" style="max-width: 400px;"></p><p>问,上图中现在ObjectA是一个子弹,ObjectB是一个怪兽,ObjectA和ObjectB发生了碰撞,碰撞了几次?</p><p>你可能很疑惑为什么我问了这样一个问题,但它确实是四叉树分片带来的又一个问题,如果A,B进行了分片,那么首先在分片过程中,A和B因为分片同时存在了四叉树分割的两个区域中,这意味着在四叉树的最终计算结果中,它将在两个不同的区域都发生了碰撞,碰撞了两次,如果不将重复的碰撞结果进行剔除,那么,这个怪兽将会承受这个子弹带来的双倍伤害,当然怪兽这样都得偷着乐了,要是子弹和它刚好在四叉树的中间区域也就是横跨了四个区域,那么它将承受因为四叉树优化带来的四倍伤害.那么,你会如何剔除重复碰撞呢,当然,你得好好想想这个问题,不然你的四叉树优化,可能又是个负优化.</p><p>截至目前,你看虽然我们讨论的是碰撞检测,仅仅一个四叉树就带来了那么多乱七八糟的问题了,没关系,我们现在讨论的还是算法方面的,如果你实际操刀写代码的话,你有没有想过四叉树是一个动态的结构,我们如何给四叉树的节点分配内存呢,</p><p>malloc?new?</p><p>用了你就沙币了,如果一个游戏里有100个object,那么创建四叉树结构至少需要100次分配节点,这也就意味着你很可能需要向系统申请100次节点的内存然后再用100次delete或者free释放掉,真的,你还不如不用四叉树呢,内存的分配与释放,可能比你直接计算碰撞还要慢,而且还能带来一堆内存碎片和缓存命中带来的一堆问题</p><p>于是你不得不重新接管内存的管理方式比如使用一个内存池来对这个四叉树结构进行管理,得,我们成功将碰撞检测这一个算法上的问题上升到了内存管理上的另一个问题,而且这两个问题你都得好好解决..因为不同类型的游戏,类似上面四叉树的空间划分算法还有很多,同时也带来了更多海量的问题,</p><p>你会发现你很难找到一个万金油类型的碰撞检测算法,依据这个游戏的不同,你得分类考虑,然后在性能与游戏体验上找到一个平衡点,当然目前很多的游戏引擎并不需要你考虑这些碰撞算法,显然的,如果使用通用的算法,你就得在性能与空间上付出点代价.</p><p>到这里你可能吐了一口气,原来还真是有些麻烦啊,抱歉,上面的东西考虑的只能说是凑活能用,其实只是冰山一角</p><p>因为游戏世界里的Object,不是长的都是规规矩矩的一个圆</p><p>有这样的</p><p><img src="https://pic1.zhimg.com/v2-4844a37d3f20e12bc68281451ef345f7_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="462" data-rawheight="392" data-watermark="watermark" data-original-src="v2-4844a37d3f20e12bc68281451ef345f7" data-watermark-src="v2-c2ce07fac2c0a03d66a26ac86b345cbf" data-private-watermark-src="v2-d341d77dc6dc4e151b14f64436936423" style="max-width: 400px;"></p><p>还有这样的</p><p><img src="https://pic1.zhimg.com/v2-c22a181a68d3bc8b2586e8fe4d48a376_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="366" data-rawheight="337" data-watermark="watermark" data-original-src="v2-c22a181a68d3bc8b2586e8fe4d48a376" data-watermark-src="v2-7aa7fce312b93aaf1c88c03dc9b306f9" data-private-watermark-src="v2-aeb92bf01b19e9ae59afded25d8ef2f8" style="max-width: 400px;"></p><p>当然,不规则几何的碰撞检测还只是"碰撞检测",还没上升到"碰撞"问题的处理上来,比如隧穿效应和PUBG里的名场面粘滞效应</p><p>现在我们再来聊聊游戏世界是如何运行的,游戏世界的时间和我们现实世界的时间有所不一样,例如一辆汽车在高速公路上飞驰一秒钟,那么你可以得出它在0.12345秒时,这辆车的位置与状态,但如果这辆车跑在游戏世界中,这恐怕就办不到了</p><p> 在游戏世界中,时间是离散的,一个称作游戏循环的逻辑结构控制着游戏世界的运行,一个称作时间粒度的变量是游戏世界时间运行的最小单位,在大多数情况下这个单位不会被进一步的细分.</p><p>在每个游戏循环中,会对游戏世界中的每一个对象进行一次更新(当然有时会对视口外或一些静态对象优化),举个栗子,如果游戏世界的时间粒度是10ms,那么,游戏世界将会计算10ms,20ms,30ms....时游戏世界中对象的状态</p><p><img src="https://pic1.zhimg.com/v2-498281d9c9d96ea316f0eb5122047039_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="806" data-rawheight="222" data-watermark="watermark" data-original-src="v2-498281d9c9d96ea316f0eb5122047039" data-watermark-src="v2-02ee8ee5091e9ad93a1904a26e069117" data-private-watermark-src="v2-74705bab9ea4cea37e6d6fb9b104d317" style="max-width: 400px;"></p><p>正因为这种运行方式,你会发现游戏世界的模拟并不能直接使用一些连续的函数来描述,例如游戏中弹道的计算或者抛物线方程,在游戏世界中未必好使,这类方程在现实中计算十分方便,毕竟我们可以直接用微积分等手段来计算出具体时间时的位置,速度,但在游戏中引用这类方程大多控制不便不利于优化设计复杂,这涉及一个将连续函数离散化的问题,因此,在一个游戏循环中,比如10ms-20ms这段时间里,在游戏世界中我们大多将这段时间的受力或者速度当做一个恒定的值因此你会发现,如果你要控制一个物体做抛物线运动,其最终的落点和你使用抛物线方程的落点最终会有所不一样,可以这么说,尽管PUBG游戏如何宣称这是一款真实的物理引擎,其最终都只是一个广告词,它与真实世界的模拟仍然有诸多的差别.</p><p>这类离散的差别也导致了一些很有意思的bug,其中一个便是遂穿效应,例如在上面的图中,10ms和20ms中出现了一堵墙</p><p><img src="https://pic1.zhimg.com/v2-8e55c12e90a218fd0eabaacbea7d5571_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="948" data-rawheight="348" data-watermark="watermark" data-original-src="v2-8e55c12e90a218fd0eabaacbea7d5571" data-watermark-src="v2-6ed382f99188c9bea0a8658711da6c73" data-private-watermark-src="v2-0ea6fa25c42eae73ae25cafc8410c089" style="max-width: 400px;"></p><p>那么,这个碰撞根本不会发生,就好像汽车穿过了这堵墙一样,如果要避免这种情况,要么把墙体的宽度变宽点,要么就减少时间粒度比如控制在5ms</p><p><img src="https://pic1.zhimg.com/v2-a0e9be9a248a002c255d3e58ebd12a8f_720w.jpg?rss" data-caption="放大墙体宽度" data-size="normal" data-rawwidth="958" data-rawheight="299" data-watermark="watermark" data-original-src="v2-a0e9be9a248a002c255d3e58ebd12a8f" data-watermark-src="v2-04dfcd7f1435ba0efa16ba621e71a692" data-private-watermark-src="v2-393c024d96fd2f5c82dcd3e66229e162" style="max-width: 400px;"></p><p><img src="https://pic1.zhimg.com/v2-f813ebb0ef658191cb6347c89189065f_720w.jpg?rss" data-caption="减少时间粒度" data-size="normal" data-rawwidth="918" data-rawheight="327" data-watermark="watermark" data-original-src="v2-f813ebb0ef658191cb6347c89189065f" data-watermark-src="v2-86cca9440be435aac3e8624df6cb7d08" data-private-watermark-src="v2-b25cee1e829c68ffc5c7bb9fc4f48c02" style="max-width: 400px;"></p><p>但正如你所知道的一样,因为每次循环都需要对游戏中所有需要更新的物体进行一次计算,因此,减少时间粒度所耗费的性能损耗往往是非常明显的,在大多数情况下,游戏设计人员会刻意减少游戏里物体的速度或者说使用第一种办法把物体做的厚一点</p><p>另一个很有意思的bug是粘滞,这也是碰撞检测方面的bug,在众多即使是3A大作的游戏中,这个bug也非常的常见并且优化困难,避免需要耗费巨大的代价,我们同样举个栗子</p><p><img src="https://pic1.zhimg.com/v2-fdac73a5c0ca73923e9413a6ffd7e3bd_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="382" data-rawheight="243" data-watermark="watermark" data-original-src="v2-fdac73a5c0ca73923e9413a6ffd7e3bd" data-watermark-src="v2-5b3997c8e06c81d33eb8eaafe1a1f121" data-private-watermark-src="v2-85f618ff9fa848378228336de6a48ba7" style="max-width: 400px;"></p><p>在上图中,一辆车装上了一个球,因为时间粒度关系,当碰撞发生时,车已经嵌入到球当中了,这个时候碰撞已经发生,按照"真实的物理引擎"计算,车应该受到一个立即的反作用力,并速度方向应该立即变为反方向</p><p><img src="https://pic1.zhimg.com/v2-2daa18e6a2e810e9ca34ba2fbe7c975d_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="303" data-rawheight="242" data-watermark="watermark" data-original-src="v2-2daa18e6a2e810e9ca34ba2fbe7c975d" data-watermark-src="v2-f2e63bb76ac80c18d0877bf0ffd1ae29" data-private-watermark-src="v2-ac5364f33af91a8b1e49286b0044c4a9" style="max-width: 400px;"></p><p>但是,因为碰撞存在能量损失,因此,回退的速度会比撞击时的瞬时速度更慢,导致了在下一次游戏循环时,车仍然没有脱离球的范围,这导致了物理引擎认为,车第二次撞上了球(实际碰撞只发生了一次),于是车又改变了速度方向,再次撞入了球,因为速度再次衰减,所以车就和这个球粘上了,如果两者状态不改变将并永远不会脱离</p><p><img src="https://pic1.zhimg.com/v2-2231d766050d2b5c6854b990fa943659_720w.jpg?rss" data-caption="" data-size="normal" data-rawwidth="316" data-rawheight="234" data-watermark="watermark" data-original-src="v2-2231d766050d2b5c6854b990fa943659" data-watermark-src="v2-0e4a561d9ec5141422861a4c12d25933" data-private-watermark-src="v2-c1dfcbd18c0f32e0f1eb442e3c6cde1b" style="max-width: 400px;"></p><p>这就导致了两个物体黏在一块,两边反复抖动,最终导致了神奇的鬼畜现象,如果碰撞是有伤害的,那么就会导致粘滞发生后不久就会瞬间爆炸</p><p><img src="https://pic1.zhimg.com/v2-a61465f96e1c36de0d3fa2368c46d8ec_720w.gif?rss" data-caption="出自天天吃鸡" data-size="normal" data-rawwidth="477" data-rawheight="369" data-watermark="watermark" data-original-src="v2-a61465f96e1c36de0d3fa2368c46d8ec" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p><img src="https://pic1.zhimg.com/v2-de5739baf3cd1bc4cbe6a01f18f39107_720w.gif?rss" data-caption="出自天天吃鸡" data-size="normal" data-rawwidth="477" data-rawheight="369" data-watermark="watermark" data-original-src="v2-de5739baf3cd1bc4cbe6a01f18f39107" data-watermark-src="" data-private-watermark-src="" style="max-width: 400px;"></p><p>   写了那么多,但其实碰撞检测有关的东西远不止上面说的那么点,游戏引擎开发的事儿,说多了都是泪,很多东西看上去很简单.但经验告诉我常常是理想很丰满现实很骨感.在做出来之前一切的感觉只是感觉</p><p>  毕竟: 少说废话,放码过来</p><p>放个广告，欢迎游戏开发大佬入驻</p><p><img src="https://pic1.zhimg.com/v2-a344425d4989b433eb52c04950f7fa32_720w.png?rss" data-caption="" data-size="normal" data-rawwidth="216" data-rawheight="283" data-watermark="watermark" data-original-src="v2-a344425d4989b433eb52c04950f7fa32" data-watermark-src="v2-4e718cc0b54237302ee201b11251d366" data-private-watermark-src="v2-f464e9cfc64f3fd0c664a97fab32219f" style="max-width: 400px;"></p><p></p>